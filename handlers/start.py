from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from create_bot import bot, scheduler, admins
from db_handler.models import User, Book, Vote
from handlers.decorators import admin_required
from peewee import fn
import random
import datetime
from datetime import timedelta

start_router = Router()

class Form(StatesGroup):
    waiting_for_book = State()
    waiting_for_rating = State()


async def register_user(user_id: int, username: str = None):
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ get –Ω–∞ –º–æ–¥–µ–ª–∏ User —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    try:
        user = User.get(User.user_id == user_id)
        return user
    except User.DoesNotExist:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
        user = User.create(
            user_id=user_id,
            is_admin=user_id in admins,
            username=username
        )
        return user

@start_router.message(CommandStart())
@admin_required
async def cmd_start(message: Message):
    user = await register_user(message.from_user.id, message.from_user.username)
    await clear_database(message)
    await message.answer(
        "üìö –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö–Ω–∏–∂–Ω—ã–π –ö–ª—É–±!\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/new_book - –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É\n"
        "/vote - –Ω–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ\n"
        "/random - —Å–ª—É—á–∞–π–Ω–∞—è –∫–Ω–∏–≥–∞\n"
        "/result - —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n"        
    )

@start_router.message(Command('new_book'))
async def cmd_new_book(message: Message, state: FSMContext):
    user = await register_user(message.from_user.id)
    
    existing_book = Book.select().where(Book.user == user).count()  # –£–±–µ—Ä–∏—Ç–µ await
    if existing_book > 0:
        return await message.answer("‚ùå –í—ã —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏ –∫–Ω–∏–≥—É!")
    
    await message.answer("üìñ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∞–≤—Ç–æ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n<code>–ù–∞–∑–≤–∞–Ω–∏–µ - –ê–≤—Ç–æ—Ä</code>")
    await state.set_state(Form.waiting_for_book)
    await state.update_data(user_id=user.user_id) 


@start_router.message(Form.waiting_for_book)
async def process_book(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id = data['user_id']  # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    
    if ' - ' not in message.text:
        return await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ü—Ä–∏–º–µ—Ä:\n<code>–í–æ–π–Ω–∞ –∏ –º–∏—Ä - –õ–µ–≤ –¢–æ–ª—Å—Ç–æ–π</code>")
    
    title, author = message.text.split(' - ', 1)
    
    user = User.get(User.user_id == user_id)  # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç User –ø–æ user_id
    Book.create(title=title.strip(), author=author.strip(), user=user)  # –£–±–µ—Ä–∏—Ç–µ await
    await message.answer(f"‚úÖ –ö–Ω–∏–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞:\n\n<b>{title.strip()}</b>\n–ê–≤—Ç–æ—Ä: {author.strip()}")
    await state.clear()

 

@start_router.message(Command('vote'))
@admin_required
async def cmd_vote(message: Message):
    books = Book.select().where(Book.is_active == True)  # –£–±–µ—Ä–∏—Ç–µ await
    
    builder = InlineKeyboardBuilder()
    for book in books:
        builder.button(text=f"{book.title} - {book.author}", callback_data=f"vote_{book.id}")
    
    builder.button(text="–ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å ‚úÖ", callback_data="submit_vote")
    builder.adjust(1)
    
    await message.answer(
        "üó≥ <b>–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å!</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥–∏:",
        reply_markup=builder.as_markup()
    )
    
    scheduler.add_job(
        finish_voting,
        'date',
        run_date=datetime.datetime.now() + timedelta(days=3),
        args=[message.chat.id]
    )
    

@start_router.callback_query(F.data.startswith("vote_"))
async def process_vote(callback: CallbackQuery):
    book_id = int(callback.data.split("_")[1])
    user = await register_user(callback.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≥–æ–ª–æ—Å–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞ —ç—Ç—É –∫–Ω–∏–≥—É
    vote_exists = Vote.select().where((Vote.user == user) & (Vote.book == book_id)).exists()
    if vote_exists:
        return await callback.answer("‚ùå –í—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ —ç—Ç—É –∫–Ω–∏–≥—É!")
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≥–æ–ª–æ—Å
    Vote.create(user=user, book=book_id)  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–¥–µ—Å—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç Book
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤
    Book.update(votes=fn.Coalesce(Book.votes, 0) + 1).where(Book.id == book_id).execute()  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ fn.Coalesce
    
    await callback.answer("‚úÖ –ì–æ–ª–æ—Å —É—á—Ç—ë–Ω!")
   

async def finish_voting(chat_id: int):
    books = await Book.select().where(Book.is_active == True).order_by(Book.votes.desc()).execute()
    
    max_votes = books[0].votes if books else 0
    winners = [book for book in books if book.votes == max_votes]
    
    text = "üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:\n" + "\n".join(
        [f"‚Ä¢ {book.title} - {book.author} ({book.votes} –≥–æ–ª.)" for book in winners]
    ) if len(winners) > 1 else f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winners[0].title} - {winners[0].author} ({max_votes} –≥–æ–ª.)"
    
    await bot.send_message(chat_id, text)
    await Book.update(is_active=False).execute()

@start_router.message(Command('random'))
@admin_required
async def cmd_random(message: Message):
    books = Book.select().where(Book.is_active == True)  # –£–±–µ—Ä–∏—Ç–µ await
    
    if not books:
        return await message.answer("üìö –°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –ø—É—Å—Ç!")
    
    random_book = random.choice(books)
    await message.answer(f"üé≤ –°–ª—É—á–∞–π–Ω–∞—è –∫–Ω–∏–≥–∞:\n\n<b>{random_book.title}</b>\n–ê–≤—Ç–æ—Ä: {random_book.author}")

@start_router.message(Command('result'))
@admin_required
async def cmd_result(message: Message):
    books = Book.select().order_by(Book.votes.desc())  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    if not books:
        await message.answer("üìä –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–Ω–∏–≥ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.")
        return
    
    text = "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:\n\n" + "\n".join(
        [f"{i + 1}. {book.title} - {book.author}: {book.votes} –≥–æ–ª." 
         for i, book in enumerate(books)]
    )
    await message.answer(text)

@start_router.message(Command('clear'))
@admin_required
async def cmd_clear(message: Message):
    Vote.delete().execute() 
    Book.delete().execute()  
    
    # await message.answer("‚úÖ –í—Å–µ –∫–Ω–∏–≥–∏ –∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–Ω–æ–≤–æ –≤–≤–æ–¥–∏—Ç—å –∫–Ω–∏–≥–∏ –∏ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å.")   
    
async def clear_database(message: Message):
    await cmd_clear(message)
