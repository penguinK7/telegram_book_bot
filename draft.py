from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from create_bot import bot, scheduler, admins
from db_handler.db_class import User, Book, Vote
from handlers.decorators import admin_required
import random
import datetime
from datetime import timedelta

start_router = Router()

class Form(StatesGroup):
    waiting_for_book = State()
    waiting_for_rating = State()

# books = []
# votes = {}    

async def register_user(user_id: int, username: str = None):
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ get –Ω–∞ –º–æ–¥–µ–ª–∏ User —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    try:
        user = User.get(User.user_id == user_id)
        return user
    except User.DoesNotExist:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
        user = User.create(
            user_id=user_id,
            is_admin=user_id in admins,
            username=username
        )
        return user

@start_router.message(CommandStart())
async def cmd_start(message: Message):
    user = await register_user(message.from_user.id, message.from_user.username)
    await message.answer(
        "üìö –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö–Ω–∏–∂–Ω—ã–π –ö–ª—É–±!\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/new_book - –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É\n"
        "/vote - –Ω–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ\n"
        "/random - —Å–ª—É—á–∞–π–Ω–∞—è –∫–Ω–∏–≥–∞\n"
        "/result - —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n"
        "/clear - –æ—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥"
    )

@start_router.message(Command('new_book'))
async def cmd_new_book(message: Message, state: FSMContext):
    user = await register_user(message.from_user.id)
    
    existing_book = await Book.select().where(Book.user == user).count()
    if existing_book > 0:
        return await message.answer("‚ùå –í—ã —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏ –∫–Ω–∏–≥—É!")
    
    await message.answer("üìñ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∞–≤—Ç–æ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n<code>–ù–∞–∑–≤–∞–Ω–∏–µ - –ê–≤—Ç–æ—Ä</code>")
    await state.set_state(Form.waiting_for_book)
    await state.update_data(user=user)

# @start_router.message(Command('new_book'))
# async def cmd_new_book(message: Message, state: FSMContext):
#     await message.answer("üìñ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∞–≤—Ç–æ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ - –ê–≤—Ç–æ—Ä –∫–Ω–∏–≥–∏")
#     await state.set_state(Form.waiting_for_book)    

@start_router.message(Form.waiting_for_book)
async def process_book(message: Message, state: FSMContext):
    data = await state.get_data()
    user = data['user']
    
    if ' - ' not in message.text:
        return await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ü—Ä–∏–º–µ—Ä:\n<code>–í–æ–π–Ω–∞ –∏ –º–∏—Ä - –õ–µ–≤ –¢–æ–ª—Å—Ç–æ–π</code>")
    
    title, author = message.text.split(' - ', 1)
    await Book.create(title=title.strip(), author=author.strip(), user=user)
    await message.answer(f"‚úÖ –ö–Ω–∏–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞:\n\n<b>{title.strip()}</b>\n–ê–≤—Ç–æ—Ä: {author.strip()}")
    await state.clear()

# @start_router.message(Form.waiting_for_book)
# async def process_book(message: Message, state: FSMContext):
#     if ' - ' not in message.text:
#         return await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ü—Ä–∏–º–µ—Ä:\n<code>–í–æ–π–Ω–∞ –∏ –º–∏—Ä - –õ–µ–≤ –¢–æ–ª—Å—Ç–æ–π</code>")
    
#     title, author = message.text.split(' - ', 1)
#     books.append({"title": title.strip(), "author": author.strip(), "votes": 0})
#     await message.answer(f"‚úÖ –ö–Ω–∏–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞:\n\n<b>{title.strip()}</b>\n–ê–≤—Ç–æ—Ä: {author.strip()}")
#     await state.clear()    

@start_router.message(Command('vote'))
@admin_required
async def cmd_vote(message: Message):
    books = await Book.select().where(Book.is_active == True).execute()
    
    builder = InlineKeyboardBuilder()
    for book in books:
        builder.button(text=f"{book.title} - {book.author}", callback_data=f"vote_{book.id}")
    
    builder.button(text="–ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å ‚úÖ", callback_data="submit_vote")
    builder.adjust(1)
    
    await message.answer(
        "üó≥ <b>–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å!</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥–∏:",
        reply_markup=builder.as_markup()
    )
    
    scheduler.add_job(
        finish_voting,
        'date',
        run_date=datetime.datetime.now() + timedelta(days=3),
        args=[message.chat.id]
    )
    
# @start_router.message(Command('vote'))
# async def cmd_vote(message: Message):
#     if not books:
#         return await message.answer("üìö –°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –ø—É—Å—Ç!")
    
#     builder = InlineKeyboardBuilder()
#     for index, book in enumerate(books):
#         builder.button(text=f"{book['title']} - {book['author']}", callback_data=f"vote_{index}")
    
#     builder.button(text="–ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å ‚úÖ", callback_data="submit_vote")
#     builder.adjust(1)
    
#     await message.answer(
#         "üó≥ <b>–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å!</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥–∏:",
#         reply_markup=builder.as_markup()
#     )    


@start_router.callback_query(F.data.startswith("vote_"))
async def process_vote(callback: CallbackQuery):
    book_id = int(callback.data.split("_")[1])
    user = await register_user(callback.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≥–æ–ª–æ—Å–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞ —ç—Ç—É –∫–Ω–∏–≥—É
    vote_exists = await Vote.select().where((Vote.user == user) & (Vote.book == book_id)).exists()
    if vote_exists:
        return await callback.answer("‚ùå –í—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ —ç—Ç—É –∫–Ω–∏–≥—É!")
    
    await Vote.create(user=user, book_id=book_id)
    await Book.update(votes=Book.votes + 1).where(Book.id == book_id).execute()
    await callback.answer("‚úÖ –ì–æ–ª–æ—Å —É—á—Ç—ë–Ω!")
    
# @start_router.callback_query(F.data.startswith("vote_"))
# async def process_vote_selection(callback: CallbackQuery):
#     user_id = callback.from_user.id
#     book_index = int(callback.data.split("_")[1])

#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–Ω–∏–≥—É
#     if user_id not in votes:
#         votes[user_id] = []

#     # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–∏–≥—É –≤ —Å–ø–∏—Å–æ–∫ –≥–æ–ª–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     if book_index not in votes[user_id]:
#         votes[user_id].append(book_index)
#         await callback.message.answer(f"‚úÖ –ö–Ω–∏–≥–∞ <b>{books[book_index]['title']}</b> –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ!")
#     else:
#         await callback.message.answer(f"‚ùå –í—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ –∫–Ω–∏–≥—É <b>{books[book_index]['title']}</b>!")

#     # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
#     builder = InlineKeyboardBuilder()
#     for index, book in enumerate(books):
#         if index in votes[user_id]:
#             builder.button(text=f"‚úÖ {book['title']} - {book['author']}", callback_data=f"vote_{index}")
#         else:
#             builder.button(text=f"{book['title']} - {book['author']}", callback_data=f"vote_{index}")
    
#     builder.button(text="–ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å ‚úÖ", callback_data="submit_vote")
#     builder.adjust(1)

#     await callback.message.edit_reply_markup(reply_markup=builder.as_markup())

# @start_router.callback_query(F.data == "submit_vote")
# async def submit_vote(callback: CallbackQuery):
#     user_id = callback.from_user.id

#     if user_id not in votes or not votes[user_id]:
#         return await callback.message.answer("‚ùå –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –∫–Ω–∏–≥–∏ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è!")

#     # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤
#     for book_index in votes[user_id]:
#         books[book_index]['votes'] += 1

#     # –û—á–∏—â–∞–µ–º –≥–æ–ª–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     del votes[user_id]

#     await callback.message.edit_text("‚úÖ –í–∞—à –≥–æ–ª–æ—Å —É—á—Ç–µ–Ω! üó≥ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!")

    

async def finish_voting(chat_id: int):
    books = await Book.select().where(Book.is_active == True).order_by(Book.votes.desc()).execute()
    
    max_votes = books[0].votes if books else 0
    winners = [book for book in books if book.votes == max_votes]
    
    text = "üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:\n" + "\n".join(
        [f"‚Ä¢ {book.title} - {book.author} ({book.votes} –≥–æ–ª.)" for book in winners]
    ) if len(winners) > 1 else f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winners[0].title} - {winners[0].author} ({max_votes} –≥–æ–ª.)"
    
    await bot.send_message(chat_id, text)
    await Book.update(is_active=False).execute()

@start_router.message(Command('random'))
@admin_required
async def cmd_random(message: Message):
    books = await Book.select().where(Book.is_active == True).execute()
    
    if not books:
        return await message.answer("üìö –°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –ø—É—Å—Ç!")
    
    random_book = random.choice(books)
    await message.answer(f"üé≤ –°–ª—É—á–∞–π–Ω–∞—è –∫–Ω–∏–≥–∞:\n\n<b>{random_book.title}</b>\n–ê–≤—Ç–æ—Ä: {random_book.author}")

@start_router.message(Command('result'))
async def cmd_result(message: Message):
    books = await Book.select().order_by(Book.votes.desc()).execute()
    
    text = "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:\n\n" + "\n".join(
        [f"{i+1}. {book.title} - {book.author}: {book.votes} –≥–æ–ª." 
         for i, book in enumerate(books)]
    )
    await message.answer(text)
    
# @start_router.message(Command('random'))
# async def cmd_random(message: Message):
#     if not books:
#         return await message.answer("üìö –°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –ø—É—Å—Ç!")
    
#     random_book = random.choice(books)
#     await message.answer(f"üé≤ –°–ª—É—á–∞–π–Ω–∞—è –∫–Ω–∏–≥–∞:\n\n<b>{random_book['title']}</b>\n–ê–≤—Ç–æ—Ä: {random_book['author']}")

# @start_router.message(Command('result'))
# async def cmd_result(message: Message):
#     if not books:
#         return await message.answer("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏.")
    
#     text = "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:\n\n" + "\n".join(
#         [f"{i+1}. {book['title']} - {book['author']}: {book['votes']} –≥–æ–ª." 
#          for i, book in enumerate(books)]
#     )
    
#     # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤
#     max_votes = max(book['votes'] for book in books)
    
#     # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–Ω–∏–≥–∏ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≥–æ–ª–æ—Å–æ–≤
#     winners = [book for book in books if book['votes'] == max_votes]
    
#     if len(winners) > 1:
#         winners_text = "üèÜ –ü–æ–±–µ–¥–∏–ª–∏ –∫–Ω–∏–≥–∏:\n" + "\n".join(
#             [f"<b>{book['title']}</b> - <i>{book['author']}</i> —Å {book['votes']} –≥–æ–ª–æ—Å–∞–º–∏." for book in winners]
#         )
#     else:
#         winners_text = f"üèÜ –ü–æ–±–µ–¥–∏–ª–∞ –∫–Ω–∏–≥–∞: <b>{winners[0]['title']}</b> - <i>{winners[0]['author']}</i> —Å {winners[0]['votes']} –≥–æ–ª–æ—Å–∞–º–∏."

#     await message.answer(text + "\n\n" + winners_text)
    

# @start_router.message(Command('clear'))
# async def cmd_clear(message: Message):
#     global books, votes
#     books = []
#     votes = {}
#     await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ –æ –∫–Ω–∏–≥–∞—Ö –æ—á–∏—â–µ–Ω—ã. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ –∫–Ω–∏–≥–∏.")    
